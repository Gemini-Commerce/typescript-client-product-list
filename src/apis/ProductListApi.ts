/* tslint:disable */
/* eslint-disable */
/**
 * Collection Service
 * API for managing collection
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductlistBulkUpdateProductListAssociationsRequest,
  ProductlistCreateProductListAssociationRequest,
  ProductlistCreateProductListAssociationResponse,
  ProductlistCreateProductListRequest,
  ProductlistCreateProductListResponse,
  ProductlistDeleteProductListAssociationRequest,
  ProductlistDeleteProductListAssociationResponse,
  ProductlistDeleteProductListRequest,
  ProductlistDeleteProductListResponse,
  ProductlistGetProductListAssociationsByProductGrnRequest,
  ProductlistGetProductListAssociationsByProductGrnResponse,
  ProductlistGetProductListByCodeRequest,
  ProductlistGetProductListByCodeResponse,
  ProductlistGetProductListByIdRequest,
  ProductlistGetProductListByIdResponse,
  ProductlistGetProductListByUrlKeyRequest,
  ProductlistGetProductListByUrlKeyResponse,
  ProductlistGetProductListsCountRequest,
  ProductlistGetProductListsCountResponse,
  ProductlistListProductListAssociationsRequest,
  ProductlistListProductListAssociationsResponse,
  ProductlistListProductListsRequest,
  ProductlistListProductListsResponse,
  ProductlistSearchProductListsByIdsRequest,
  ProductlistSearchProductListsByIdsResponse,
  ProductlistSearchProductListsRequest,
  ProductlistSearchProductListsResponse,
  ProductlistUpdateProductListRequest,
  ProductlistUpdateProductListResponse,
  RpcStatus,
} from '../models/index';
import {
    ProductlistBulkUpdateProductListAssociationsRequestFromJSON,
    ProductlistBulkUpdateProductListAssociationsRequestToJSON,
    ProductlistCreateProductListAssociationRequestFromJSON,
    ProductlistCreateProductListAssociationRequestToJSON,
    ProductlistCreateProductListAssociationResponseFromJSON,
    ProductlistCreateProductListAssociationResponseToJSON,
    ProductlistCreateProductListRequestFromJSON,
    ProductlistCreateProductListRequestToJSON,
    ProductlistCreateProductListResponseFromJSON,
    ProductlistCreateProductListResponseToJSON,
    ProductlistDeleteProductListAssociationRequestFromJSON,
    ProductlistDeleteProductListAssociationRequestToJSON,
    ProductlistDeleteProductListAssociationResponseFromJSON,
    ProductlistDeleteProductListAssociationResponseToJSON,
    ProductlistDeleteProductListRequestFromJSON,
    ProductlistDeleteProductListRequestToJSON,
    ProductlistDeleteProductListResponseFromJSON,
    ProductlistDeleteProductListResponseToJSON,
    ProductlistGetProductListAssociationsByProductGrnRequestFromJSON,
    ProductlistGetProductListAssociationsByProductGrnRequestToJSON,
    ProductlistGetProductListAssociationsByProductGrnResponseFromJSON,
    ProductlistGetProductListAssociationsByProductGrnResponseToJSON,
    ProductlistGetProductListByCodeRequestFromJSON,
    ProductlistGetProductListByCodeRequestToJSON,
    ProductlistGetProductListByCodeResponseFromJSON,
    ProductlistGetProductListByCodeResponseToJSON,
    ProductlistGetProductListByIdRequestFromJSON,
    ProductlistGetProductListByIdRequestToJSON,
    ProductlistGetProductListByIdResponseFromJSON,
    ProductlistGetProductListByIdResponseToJSON,
    ProductlistGetProductListByUrlKeyRequestFromJSON,
    ProductlistGetProductListByUrlKeyRequestToJSON,
    ProductlistGetProductListByUrlKeyResponseFromJSON,
    ProductlistGetProductListByUrlKeyResponseToJSON,
    ProductlistGetProductListsCountRequestFromJSON,
    ProductlistGetProductListsCountRequestToJSON,
    ProductlistGetProductListsCountResponseFromJSON,
    ProductlistGetProductListsCountResponseToJSON,
    ProductlistListProductListAssociationsRequestFromJSON,
    ProductlistListProductListAssociationsRequestToJSON,
    ProductlistListProductListAssociationsResponseFromJSON,
    ProductlistListProductListAssociationsResponseToJSON,
    ProductlistListProductListsRequestFromJSON,
    ProductlistListProductListsRequestToJSON,
    ProductlistListProductListsResponseFromJSON,
    ProductlistListProductListsResponseToJSON,
    ProductlistSearchProductListsByIdsRequestFromJSON,
    ProductlistSearchProductListsByIdsRequestToJSON,
    ProductlistSearchProductListsByIdsResponseFromJSON,
    ProductlistSearchProductListsByIdsResponseToJSON,
    ProductlistSearchProductListsRequestFromJSON,
    ProductlistSearchProductListsRequestToJSON,
    ProductlistSearchProductListsResponseFromJSON,
    ProductlistSearchProductListsResponseToJSON,
    ProductlistUpdateProductListRequestFromJSON,
    ProductlistUpdateProductListRequestToJSON,
    ProductlistUpdateProductListResponseFromJSON,
    ProductlistUpdateProductListResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface BulkUpdateProductListAssociationsRequest {
    body: ProductlistBulkUpdateProductListAssociationsRequest;
}

export interface CreateProductListRequest {
    body: ProductlistCreateProductListRequest;
}

export interface CreateProductListAssociationRequest {
    body: ProductlistCreateProductListAssociationRequest;
}

export interface DeleteProductListRequest {
    body: ProductlistDeleteProductListRequest;
}

export interface DeleteProductListAssociationRequest {
    body: ProductlistDeleteProductListAssociationRequest;
}

export interface GetProductListAssociationsByProductGrnRequest {
    body: ProductlistGetProductListAssociationsByProductGrnRequest;
}

export interface GetProductListByCodeRequest {
    body: ProductlistGetProductListByCodeRequest;
}

export interface GetProductListByIdRequest {
    body: ProductlistGetProductListByIdRequest;
}

export interface GetProductListByUrlKeyRequest {
    body: ProductlistGetProductListByUrlKeyRequest;
}

export interface GetProductListsCountRequest {
    body: ProductlistGetProductListsCountRequest;
}

export interface ListProductListAssociationsRequest {
    body: ProductlistListProductListAssociationsRequest;
}

export interface ListProductListsRequest {
    body: ProductlistListProductListsRequest;
}

export interface SearchProductListsRequest {
    body: ProductlistSearchProductListsRequest;
}

export interface SearchProductListsByIdsRequest {
    body: ProductlistSearchProductListsByIdsRequest;
}

export interface UpdateProductListRequest {
    body: ProductlistUpdateProductListRequest;
}

/**
 * 
 */
export class ProductListApi extends runtime.BaseAPI {

    /**
     * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
     * Bulk update collection associations position
     */
    async bulkUpdateProductListAssociationsRaw(requestParameters: BulkUpdateProductListAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RpcStatus>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bulkUpdateProductListAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/BulkUpdateProductListAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistBulkUpdateProductListAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RpcStatusFromJSON(jsonValue));
    }

    /**
     * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
     * Bulk update collection associations position
     */
    async bulkUpdateProductListAssociations(requestParameters: BulkUpdateProductListAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RpcStatus> {
        const response = await this.bulkUpdateProductListAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
     * Create Collection
     */
    async createProductListRaw(requestParameters: CreateProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistCreateProductListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProductList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/CreateProductList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistCreateProductListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistCreateProductListResponseFromJSON(jsonValue));
    }

    /**
     * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
     * Create Collection
     */
    async createProductList(requestParameters: CreateProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistCreateProductListResponse> {
        const response = await this.createProductListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
     * Create Collection/Product Association
     */
    async createProductListAssociationRaw(requestParameters: CreateProductListAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistCreateProductListAssociationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProductListAssociation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/CreateProductListAssociation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistCreateProductListAssociationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistCreateProductListAssociationResponseFromJSON(jsonValue));
    }

    /**
     * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
     * Create Collection/Product Association
     */
    async createProductListAssociation(requestParameters: CreateProductListAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistCreateProductListAssociationResponse> {
        const response = await this.createProductListAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
     * Delete Collection
     */
    async deleteProductListRaw(requestParameters: DeleteProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistDeleteProductListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteProductList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/DeleteProductList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistDeleteProductListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistDeleteProductListResponseFromJSON(jsonValue));
    }

    /**
     * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
     * Delete Collection
     */
    async deleteProductList(requestParameters: DeleteProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistDeleteProductListResponse> {
        const response = await this.deleteProductListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
     * Delete Collection/Product Association
     */
    async deleteProductListAssociationRaw(requestParameters: DeleteProductListAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistDeleteProductListAssociationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteProductListAssociation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/DeleteProductListAssociation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistDeleteProductListAssociationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistDeleteProductListAssociationResponseFromJSON(jsonValue));
    }

    /**
     * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
     * Delete Collection/Product Association
     */
    async deleteProductListAssociation(requestParameters: DeleteProductListAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistDeleteProductListAssociationResponse> {
        const response = await this.deleteProductListAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
     * Get Collection/Product Associations by Product GRN
     */
    async getProductListAssociationsByProductGrnRaw(requestParameters: GetProductListAssociationsByProductGrnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getProductListAssociationsByProductGrn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/GetProductListAssociationsByProductGrn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistGetProductListAssociationsByProductGrnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistGetProductListAssociationsByProductGrnResponseFromJSON(jsonValue));
    }

    /**
     * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
     * Get Collection/Product Associations by Product GRN
     */
    async getProductListAssociationsByProductGrn(requestParameters: GetProductListAssociationsByProductGrnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistGetProductListAssociationsByProductGrnResponse> {
        const response = await this.getProductListAssociationsByProductGrnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Code
     */
    async getProductListByCodeRaw(requestParameters: GetProductListByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistGetProductListByCodeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getProductListByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/GetProductListByCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistGetProductListByCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistGetProductListByCodeResponseFromJSON(jsonValue));
    }

    /**
     * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Code
     */
    async getProductListByCode(requestParameters: GetProductListByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistGetProductListByCodeResponse> {
        const response = await this.getProductListByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Id
     */
    async getProductListByIdRaw(requestParameters: GetProductListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistGetProductListByIdResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getProductListById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/GetProductListById`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistGetProductListByIdRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistGetProductListByIdResponseFromJSON(jsonValue));
    }

    /**
     * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Id
     */
    async getProductListById(requestParameters: GetProductListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistGetProductListByIdResponse> {
        const response = await this.getProductListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Url Key
     */
    async getProductListByUrlKeyRaw(requestParameters: GetProductListByUrlKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistGetProductListByUrlKeyResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getProductListByUrlKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/GetProductListByUrlKey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistGetProductListByUrlKeyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistGetProductListByUrlKeyResponseFromJSON(jsonValue));
    }

    /**
     * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
     * Get Collection by Url Key
     */
    async getProductListByUrlKey(requestParameters: GetProductListByUrlKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistGetProductListByUrlKeyResponse> {
        const response = await this.getProductListByUrlKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
     * Get Collection Product Count
     */
    async getProductListsCountRaw(requestParameters: GetProductListsCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistGetProductListsCountResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getProductListsCount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/GetProductListsCount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistGetProductListsCountRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistGetProductListsCountResponseFromJSON(jsonValue));
    }

    /**
     * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
     * Get Collection Product Count
     */
    async getProductListsCount(requestParameters: GetProductListsCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistGetProductListsCountResponse> {
        const response = await this.getProductListsCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
     * List Collection/Product Associations
     */
    async listProductListAssociationsRaw(requestParameters: ListProductListAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistListProductListAssociationsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listProductListAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/ListProductListAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistListProductListAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistListProductListAssociationsResponseFromJSON(jsonValue));
    }

    /**
     * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
     * List Collection/Product Associations
     */
    async listProductListAssociations(requestParameters: ListProductListAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistListProductListAssociationsResponse> {
        const response = await this.listProductListAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * List Collections
     */
    async listProductListsRaw(requestParameters: ListProductListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistListProductListsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listProductLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/ListProductLists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistListProductListsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistListProductListsResponseFromJSON(jsonValue));
    }

    /**
     * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * List Collections
     */
    async listProductLists(requestParameters: ListProductListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistListProductListsResponse> {
        const response = await this.listProductListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * Search Collections
     */
    async searchProductListsRaw(requestParameters: SearchProductListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistSearchProductListsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchProductLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/SearchProductLists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistSearchProductListsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistSearchProductListsResponseFromJSON(jsonValue));
    }

    /**
     * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * Search Collections
     */
    async searchProductLists(requestParameters: SearchProductListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistSearchProductListsResponse> {
        const response = await this.searchProductListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
     * Search Collections by Ids
     */
    async searchProductListsByIdsRaw(requestParameters: SearchProductListsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistSearchProductListsByIdsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchProductListsByIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/SearchProductListsByIds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistSearchProductListsByIdsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistSearchProductListsByIdsResponseFromJSON(jsonValue));
    }

    /**
     * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
     * Search Collections by Ids
     */
    async searchProductListsByIds(requestParameters: SearchProductListsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistSearchProductListsByIdsResponse> {
        const response = await this.searchProductListsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The UpdateProductList endpoint is used to update an existing collection of products within the system.
     * Update Collection
     */
    async updateProductListRaw(requestParameters: UpdateProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductlistUpdateProductListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProductList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/productlist.ProductList/UpdateProductList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductlistUpdateProductListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductlistUpdateProductListResponseFromJSON(jsonValue));
    }

    /**
     * The UpdateProductList endpoint is used to update an existing collection of products within the system.
     * Update Collection
     */
    async updateProductList(requestParameters: UpdateProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductlistUpdateProductListResponse> {
        const response = await this.updateProductListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
